//-----------------------------------------------------------------------------
// <auto-generated> 
//   This code was generated by a tool. 
// 
//   Changes to this file may cause incorrect behavior and will be lost if  
//   the code is regenerated.
//
//   Tool: AllJoynCodeGenerator.exe
//
//   This tool is located in the Windows 10 SDK and the Windows 10 AllJoyn 
//   Visual Studio Extension in the Visual Studio Gallery.  
//
//   The generated code should be packaged in a Windows 10 C++/CX Runtime  
//   Component which can be consumed in any UWP-supported language using 
//   APIs that are available in Windows.Devices.AllJoyn.
//
//   Using AllJoynCodeGenerator - Invoke the following command with a valid 
//   Introspection XML file and a writable output directory:
//     AllJoynCodeGenerator -i <INPUT XML FILE> -o <OUTPUT DIRECTORY>
// </auto-generated>
//-----------------------------------------------------------------------------
#pragma once

namespace org { namespace allseen { namespace LSF { namespace ControllerService {

// This class, and the associated EventArgs classes, exist for the benefit of JavaScript developers who
// do not have the ability to implement IControllerServiceService. Instead, ControllerServiceServiceEventAdapter
// provides the Interface implementation and exposes a set of compatible events to the developer.
public ref class ControllerServiceServiceEventAdapter sealed : [Windows::Foundation::Metadata::Default] IControllerServiceService
{
public:
    // Method Invocation Events
    event Windows::Foundation::TypedEventHandler<ControllerServiceServiceEventAdapter^, ControllerServiceLightingResetControllerServiceCalledEventArgs^>^ LightingResetControllerServiceCalled 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<ControllerServiceServiceEventAdapter^, ControllerServiceLightingResetControllerServiceCalledEventArgs^>^ handler) 
        { 
            return _LightingResetControllerServiceCalled += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<ControllerServiceServiceEventAdapter^>(sender), safe_cast<ControllerServiceLightingResetControllerServiceCalledEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _LightingResetControllerServiceCalled -= token; 
        } 
    internal: 
        void raise(ControllerServiceServiceEventAdapter^ sender, ControllerServiceLightingResetControllerServiceCalledEventArgs^ args) 
        { 
            _LightingResetControllerServiceCalled(sender, args);
        } 
    }

    event Windows::Foundation::TypedEventHandler<ControllerServiceServiceEventAdapter^, ControllerServiceGetControllerServiceVersionCalledEventArgs^>^ GetControllerServiceVersionCalled 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<ControllerServiceServiceEventAdapter^, ControllerServiceGetControllerServiceVersionCalledEventArgs^>^ handler) 
        { 
            return _GetControllerServiceVersionCalled += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<ControllerServiceServiceEventAdapter^>(sender), safe_cast<ControllerServiceGetControllerServiceVersionCalledEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _GetControllerServiceVersionCalled -= token; 
        } 
    internal: 
        void raise(ControllerServiceServiceEventAdapter^ sender, ControllerServiceGetControllerServiceVersionCalledEventArgs^ args) 
        { 
            _GetControllerServiceVersionCalled(sender, args);
        } 
    }

    // Property Read Events
    event Windows::Foundation::TypedEventHandler<ControllerServiceServiceEventAdapter^, ControllerServiceGetVersionRequestedEventArgs^>^ GetVersionRequested 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<ControllerServiceServiceEventAdapter^, ControllerServiceGetVersionRequestedEventArgs^>^ handler) 
        { 
            return _GetVersionRequested += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<ControllerServiceServiceEventAdapter^>(sender), safe_cast<ControllerServiceGetVersionRequestedEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _GetVersionRequested -= token; 
        } 
    internal: 
        void raise(ControllerServiceServiceEventAdapter^ sender, ControllerServiceGetVersionRequestedEventArgs^ args) 
        { 
            _GetVersionRequested(sender, args);
        } 
    }

    // Property Write Events
    // IControllerServiceService Implementation
    virtual Windows::Foundation::IAsyncOperation<ControllerServiceLightingResetControllerServiceResult^>^ LightingResetControllerServiceAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);
    virtual Windows::Foundation::IAsyncOperation<ControllerServiceGetControllerServiceVersionResult^>^ GetControllerServiceVersionAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    virtual Windows::Foundation::IAsyncOperation<ControllerServiceGetVersionResult^>^ GetVersionAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);


private:
    event Windows::Foundation::EventHandler<Platform::Object^>^ _LightingResetControllerServiceCalled;
    event Windows::Foundation::EventHandler<Platform::Object^>^ _GetControllerServiceVersionCalled;
    event Windows::Foundation::EventHandler<Platform::Object^>^ _GetVersionRequested;
};

} } } } 
